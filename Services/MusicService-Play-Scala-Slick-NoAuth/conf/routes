# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# ----- WebApplication (User Interface) ------------------------------------------------------------------------------------------
GET     /                                                                   musicsvc.controllers.WebApplication.index
GET     /webApp                                                             musicsvc.controllers.WebApplication.webApp

GET     /webApp/recordings                                                  musicsvc.controllers.WebApplication.recordings
GET     /webApp/recordings/overview                                         musicsvc.controllers.WebApplication.recordingsOverview
GET     /webApp/recordings/search                                           musicsvc.controllers.WebApplication.recordingsOverview
POST    /webApp/recordings/search                                           musicsvc.controllers.WebApplication.recordingsSearch
GET     /webApp/recordings/:rId/details                                     musicsvc.controllers.WebApplication.recordingDetails(rId: Long)
GET     /webApp/recordings/:rId/edit                                        musicsvc.controllers.WebApplication.recordingEdit(rId: Long)
POST    /webApp/recordings/:rId/update                                      musicsvc.controllers.WebApplication.recordingUpdate(rId: Long)
GET     /webApp/recordings/:rId/delete                                      musicsvc.controllers.WebApplication.recordingDelete(rId: Long)
GET     /webApp/recordings/deleteAll                                        musicsvc.controllers.WebApplication.recordingsDeleteAll
GET     /webApp/recordings/editNew                                          musicsvc.controllers.WebApplication.recordingEditNew
GET     /webApp/recordings/:rId/deletePerformers/:pIds                      musicsvc.controllers.WebApplication.deletePerformersFromRecording(rId: Long, pIds: String)
GET     /webApp/recordings/:rId/addPerformers/:pIds                         musicsvc.controllers.WebApplication.addPerformersToRecording(rId: Long, pIds: String)
POST    /webApp/recordings/create                                           musicsvc.controllers.WebApplication.recordingCreate
GET     /webApp/recordings/:rId/data                                        musicsvc.controllers.WebApplication.getRecordingData(rId: Long)

GET     /webApp/performers                                                  musicsvc.controllers.WebApplication.performers
GET     /webApp/performers/overview                                         musicsvc.controllers.WebApplication.performersOverview
GET     /webApp/performers/search                                           musicsvc.controllers.WebApplication.performersOverview
POST    /webApp/performers/search                                           musicsvc.controllers.WebApplication.performersSearch
GET     /webApp/performers/:pId/details                                     musicsvc.controllers.WebApplication.performerDetails(pId: Long)
GET     /webApp/performers/:pId/edit                                        musicsvc.controllers.WebApplication.performerEdit(pId: Long)
POST    /webApp/performers/:pId/update                                      musicsvc.controllers.WebApplication.performerUpdate(pId: Long)
GET     /webApp/performers/:pId/delete                                      musicsvc.controllers.WebApplication.performerDelete(pId: Long)
GET     /webApp/performers/deleteAll                                        musicsvc.controllers.WebApplication.performersDeleteAll
GET     /webApp/performers/:pId/deleteRecordings/:rIds                      musicsvc.controllers.WebApplication.deleteRecordingsFromPerformer(pId: Long, rIds: String)
GET     /webApp/performers/:pId/addRecordings/:rIds                         musicsvc.controllers.WebApplication.addRecordingsToPerformer(pId: Long, rIds: String)
GET     /webApp/performers/editNew                                          musicsvc.controllers.WebApplication.performerEditNew
POST    /webApp/performers/create                                           musicsvc.controllers.WebApplication.performerCreate


# ----- WebService (Data Interface) ------------------------------------------------------------------------------------------
GET     /ping                                                               musicsvc.controllers.WebService.ping

POST    /performers                                                         musicsvc.controllers.WebService.addPerformer
GET     /performers                                                         musicsvc.controllers.WebService.findAllPerformers
GET     /performers/search                                                  musicsvc.controllers.WebService.findPerformersByCriteria(name: Option[String], performerType: Option[String], performingIn: Option[Long])
GET     /performers/:pId                                                    musicsvc.controllers.WebService.findPerformerById(pId: Long)
DELETE  /performers/:pId                                                    musicsvc.controllers.WebService.deletePerformerById(pId: Long)
DELETE  /performers                                                         musicsvc.controllers.WebService.deleteAllPerformers
PUT     /performers/:pId                                                    musicsvc.controllers.WebService.updatePerformerById(pId: Long)
PUT     /performers/:pId/deleteRecordings                                   musicsvc.controllers.WebService.deleteRecordingsFromPerformer(pId: Long)
PUT     /performers/:pId/addRecordings                                      musicsvc.controllers.WebService.addRecordingsToPerformer(pId: Long)

POST    /recordings                                                         musicsvc.controllers.WebService.addRecording
GET     /recordings/:rId/data                                               musicsvc.controllers.WebService.getRecordingData(rId: Long)
GET     /recordings                                                         musicsvc.controllers.WebService.findAllRecordings
GET     /recordings/search                                                  musicsvc.controllers.WebService.findRecordingsByCriteria(title: Option[String], composer: Option[String], yearMin: Option[Int], yearMax: Option[Int], performedBy: Option[Long])
GET     /recordings/:rId                                                    musicsvc.controllers.WebService.findRecordingById(rId: Long)
DELETE  /recordings/:rId                                                    musicsvc.controllers.WebService.deleteRecordingById(rId: Long)
DELETE  /recordings                                                         musicsvc.controllers.WebService.deleteAllRecordings
PUT     /recordings/:rId                                                    musicsvc.controllers.WebService.updateRecordingById(rId: Long)
PUT     /recordings/:rId/deletePerformers                                   musicsvc.controllers.WebService.deletePerformersFromRecording(rId: Long)
PUT     /recordings/:rId/addPerformers                                      musicsvc.controllers.WebService.addPerformersToRecording(rId: Long)


# ----- Assets ---------------------------------------------------------------------------------------------------------
# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
